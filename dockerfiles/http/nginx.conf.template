user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  use epoll;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    # server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server web:8000 fail_timeout=0;
  }

  #server {
  #  # if no Host match, close the connection to prevent host spoofing
  #  listen 80 default_server;
  #  return 444;
  #}

  server {
    # Remove the www subdomain
    listen 80;
    listen 443 ssl;
    server_name www.${SERVER_NAME};
    return 301 $scheme://${SERVER_NAME}$request_uri;
  }

  server {
    listen 80;
    listen 443 ssl;
    server_name ~^(?<project>.*).${SERVER_NAME};
    location ~ ^/(static|site|accounts|socialauth)/ {
      proxy_pass $scheme://127.0.0.1$request_uri;
      proxy_set_header Host ${SERVER_NAME};
    }
    location / {
      proxy_pass $scheme://127.0.0.1/site/$project$request_uri;
      proxy_set_header Host $http_host;
    }
  } 

  server {
    listen 80 default_server;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name ${SERVER_NAME} "";

    root /srv/;

    keepalive_timeout 5;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /http/;
    }
  }
}
